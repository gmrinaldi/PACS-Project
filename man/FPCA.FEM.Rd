% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/smoothFPCA.R
\name{FPCA.FEM}
\alias{FPCA.FEM}
\title{Smooth Functional Principal Component Analysis}
\usage{
FPCA.FEM(locations = NULL, datamatrix, FEMbasis, lambda, nPC=1, validation=NULL,NFolds=5,GCVmethod = "Stochastic", nrealizations = 100)
}
\arguments{
\item{locations}{A #observations-by-ndim matrix where each row specifies the spatial coordinates \code{x} and \code{y} (and \code{z} if ndim=3) of the corresponding column of observations in the matrix \code{datamatrix}.
This parameter can be \code{NULL}. In this case the spatial coordinates of the corresponding observations are assigned as specified in \code{datamatrix}.}

\item{datamatrix}{A matrix of dimensions #samples-by-#points(or #observations) with the observed data values over the domain for each sample. 
The locations of the observations can be specified with the \code{locations} argument.
The datamatrix needs to have zero mean.
Otherwise if only the datamatrix is given, these are considered to be located in the corresponding node in the table
\code{nodes} of the mesh. In this last case, a column with \code{NA} value in the \code{datamatrix} indicates that there is no observation associated to the corresponding
 node.}

\item{FEMbasis}{A \code{FEMbasis} object describing the Finite Element basis, as created by \code{\link{create.FEM.basis}}.}

\item{lambda}{A scalar or vector of smoothing parameters.}

\item{nPC}{An integer specifying the number of Principal Components to compute.}

\item{validation}{String. If \code{lambda} is a vector, it has to be specified as \code{"GCV"} or \code{"KFold"}. This parameter specify which method of cross-validation is used to select the best parameter \code{lambda} among those values of the smoothing parameter specified in \code{lambda} for each Principal Component.}

\item{NFolds}{An integer specifying the number of folds to use if the KFold cross-validation method for the selection of the best parameter \code{lambda} is chosen. Default value is 5.}

\item{GCVmethod}{If set to "Exact" perform an exact (but possibly slow) computation of the GCV index. If set to "Stochastic" approximate the GCV with a stochastic algorithm.}

\item{nrealizations}{The number of realizations to be used in the stochastic algorithm for the estimation of GCV.}
}
\value{
A list with the following variables:
\item{\code{loadings.FEM}}{A \code{FEM} object that represents the normalized functional loadings for each Principal Component computed.}
\item{\code{scores}}{A #samples-by-#PrincipalComponents matrix that represents the unnormalized scores or PC vectors.}
\item{\code{lambda}}{A vector of length #PrincipalComponents where each value is \code{lambda} chosen for that Principal Component.}
\item{\code{variance_explained}}{A vector of length #PrincipalComponents where each value represent the variance explained by that component.}
\item{\code{ cumsum_percentage}}{A vector of length #PrincipalComponents containing the cumulative percentage of the variance explained by the first components.}
}
\description{
This function implements a smooth functional principal component analysis over a planar mesh, a smooth manifold or a volume. In order to perform some regularization, the calculation involves the Laplacian of the spatial field. The computation relies only on the C++ implementation of the algorithm.
}
\examples{
library(fdaPDE)
## Load the hub data
data(hub)
## Plot the mesh
plot(hub)
## Create the Finite Element basis 
FEMbasis = create.FEM.basis(hub)
## Create a datamatrix
datamatrix<-NULL;
for(ii in 1:50){
a1 = rnorm(1,mean = 1, sd = 1)
a2 = rnorm(1,mean = 1, sd = 1)
a3 = rnorm(1,mean = 1, sd = 1)

func_evaluation = numeric(nnodes)
for (i in 0:(nnodes-1)){
 func_evaluation[i+1] = a1* sin(2*pi*hub$nodes[i+1,1]) +  a2* sin(2*pi*hub$nodes[i+1,2]) +  a3*sin(2*pi*hub$nodes[i+1,3]) +1
}
data=func_evaluation+rnorm(nnodes,mean=0,sd=0.5)
datamatrix<-rbind(datamatrix,data)
}
## Compute the mean of the datamatrix and subtract it

datamatrix_demeaned=datamatrix-data_demean
##Fix the parameter lambda
lambda=c(0.00375)
## Estimate the first 2 Principal Components
output_CPP =smooth.FEM.FPCA(datamatrix = datamatrix_demeaned,
                           FEMbasis = FEMbasis, lambda = lambda,nPC=2)

## Plot the functional loadings of the estimated Principal Components                           
plot(output_CPP$loadings.FEM)
}
\references{
Sangalli, L.M., Ramsay, J.O. & Ramsay, T.O., 2013. Spatial spline regression models. Journal of the Royal Statistical Society. Series B: Statistical Methodology, 75(4), pp. 681-703.
}
