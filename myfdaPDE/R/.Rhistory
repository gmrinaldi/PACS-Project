indices<-nrow(nodes)+cumsum(!repeated_edges)
identical(indices2,indices)
indices<-nrow(nodes)+cumsum(!repeated_edges)
tetrahedrons2<-cbind(tetrahedrons,matrix(0,nrow=nrow(tetrahedrons),ncol=6))
tetrahedrons2[tetrahedron_labels]<-indices
nodes<-rbind(nodes,midpoints)
nodes<-sphere3Ddata$nodes
nodes<-rbind(nodes,midpoints)
rgl.points(nodes[last,1],nodes[last,2],nodes[last,3])
nodes<-sphere3Ddata$nodes
#Questo non funziona per ora
midpoints <- nodes[edges[,1],]/2+nodes[edges[,2],]/2
edge_labels <- matrix(unlist(edge_list),ncol=4, byrow = TRUE)[,3:4]
face_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
tetrahedron_labels <- cbind(face_labels[edge_labels[,1],],edge_labels[,2])
lookUp <- cbind(rep(1:4,each=3),rep(1:3,4),4+c(1,2,3,1,4,5,2,4,6,3,5,6))
tetrahedron_labels <- as.matrix(merge(tetrahedron_labels,lookUp,by.x=c("V2","V3"),by.y=c("V1","V2")))[,3:4]
indices<-nrow(nodes)+cumsum(!repeated_edges)
tetrahedrons2<-cbind(tetrahedrons,matrix(0,nrow=nrow(tetrahedrons),ncol=6))
tetrahedrons2[tetrahedron_labels]<-indices
nodes<-rbind(nodes,midpoints)
last<-tail(tetrahedrons2,1)
rgl.points(nodes[last,1],nodes[last,2],nodes[last,3])
lookUp <- cbind(rep(1:4,each=3),rep(1:3,4),c(1,2,3,1,4,5,2,4,6,3,5,6))
View(neighbors)
#Compute neighbors (see Ueng, Sikorski 1996)
neighbors <- matrix(-1, nrow = nrow(tetrahedrons), ncol = 4)
#Note: select first 4 cols of tetrahedrons to avoid issues in case order=2
ordered_tetrahedrons<-cbind(t(apply(tetrahedrons[,1:4], 1, sort)),1:nrow(tetrahedrons))
faces_list<-apply(ordered_tetrahedrons, 1, function(x){
F1<-c(x[c(1,2,3)],x[5],1)
F2<-c(x[c(1,2,4)],x[5],2)
F3<-c(x[c(1,3,4)],x[5],3)
F4<-c(x[c(2,3,4)],x[5],4)
list(F1,F2,F3,F4)
})
faces_list<-unlist(faces_list, recursive = FALSE)
#Compute neighbors (see Ueng, Sikorski 1996)
neighbors <- matrix(-1, nrow = nrow(tetrahedrons), ncol = 4)
#Note: select first 4 cols of tetrahedrons to avoid issues in case order=2
ordered_tetrahedrons<-cbind(t(apply(tetrahedrons[,1:4], 1, sort)),1:nrow(tetrahedrons))
faces_list<-apply(ordered_tetrahedrons, 1, function(x){
F1<-c(x[c(1,2,3)],x[5],1)
F2<-c(x[c(1,2,4)],x[5],2)
F3<-c(x[c(1,3,4)],x[5],3)
F4<-c(x[c(2,3,4)],x[5],4)
list(F1,F2,F3,F4)
})
faces_list<-unlist(faces_list, recursive = FALSE)
for (level in 3:1){
bin_list <- vector(mode = "list", length = nrow(nodes))
for (i in 1:length(faces_list))
bin_list[[faces_list[[i]][level]]]<-c(bin_list[[faces_list[[i]][level]]],faces_list[i])
faces_list <- unlist(bin_list, recursive = FALSE)
}
View(faces_list)
repeated_faces<-rep(FALSE,length(faces_list))
previous<-faces_list[1]
for (i in 2:length(faces_list)){
current<-faces_list[[i]]
if(identical(current[1:3],previous[1:3])){
repeated_faces[i]<-TRUE
neighbors[current[4],previous[5]]<-previous[4]
neighbors[previous[4],current[5]]<-current[4]
}
previous<-current
}
View(faces_list)
nodes=sphere3Ddata$nodes
tetrahedrons=sphere3Ddata$tetrahedrons
#Compute neighbors (see Ueng, Sikorski 1996)
neighbors <- matrix(-1, nrow = nrow(tetrahedrons), ncol = 4)
#Note: select first 4 cols of tetrahedrons to avoid issues in case order=2
ordered_tetrahedrons<-cbind(t(apply(tetrahedrons[,1:4], 1, sort)),1:nrow(tetrahedrons))
faces_list<-apply(ordered_tetrahedrons, 1, function(x){
F1<-c(x[c(1,2,3)],x[5],1)
F2<-c(x[c(1,2,4)],x[5],2)
F3<-c(x[c(1,3,4)],x[5],3)
F4<-c(x[c(2,3,4)],x[5],4)
list(F1,F2,F3,F4)
})
faces_list<-unlist(faces_list, recursive = FALSE)
for (level in 3:1){
bin_list <- vector(mode = "list", length = nrow(nodes))
for (i in 1:length(faces_list))
bin_list[[faces_list[[i]][level]]]<-c(bin_list[[faces_list[[i]][level]]],faces_list[i])
faces_list <- unlist(bin_list, recursive = FALSE)
}
repeated_faces<-rep(FALSE,length(faces_list))
previous<-faces_list[1]
for (i in 2:length(faces_list)){
current<-faces_list[[i]]
if(identical(current[1:3],previous[1:3])){
repeated_faces[i]<-TRUE
neighbors[current[4],previous[5]]<-previous[4]
neighbors[previous[4],current[5]]<-current[4]
}
previous<-current
}
previous<-faces_list[[1]]
for (i in 2:length(faces_list)){
current<-faces_list[[i]]
if(identical(current[1:3],previous[1:3])){
repeated_faces[i]<-TRUE
neighbors[current[4],previous[5]]<-previous[4]
neighbors[previous[4],current[5]]<-current[4]
}
previous<-current
}
faces_list[1][1:3]
a<-list(1,2,3)
for(i in a){str(i)}
neighbors2<-neighbors
previous<-faces_list[[1]]
for (current in faces_list[-1])){
if(identical(current[1:3],previous[1:3])){
repeated_faces[i]<-TRUE
neighbors[current[4],previous[5]]<-previous[4]
neighbors[previous[4],current[5]]<-current[4]
}
previous<-current
}
previous<-faces_list[[1]]
for (current in faces_list[-1]){
if(identical(current[1:3],previous[1:3])){
repeated_faces[i]<-TRUE
neighbors[current[4],previous[5]]<-previous[4]
neighbors[previous[4],current[5]]<-current[4]
}
previous<-current
}
identical(neighbors,neighbors2)
tetrahedrons[1]
tetrahedrons[1,]
tetrahedrons[10,]
tetrahedrons[2261,]
#Compute neighbors (see Ueng, Sikorski 1996)
neighbors <- matrix(-1, nrow = nrow(tetrahedrons), ncol = 4)
#Note: select first 4 cols of tetrahedrons to avoid issues in case order=2
ordered_tetrahedrons<-cbind(t(apply(tetrahedrons[,1:4], 1, sort)),1:nrow(tetrahedrons))
faces_list<-apply(ordered_tetrahedrons, 1, function(x){
F1<-c(x[c(1,2,3)],x[5],1)
F2<-c(x[c(1,2,4)],x[5],2)
F3<-c(x[c(1,3,4)],x[5],3)
F4<-c(x[c(2,3,4)],x[5],4)
list(F1,F2,F3,F4)
})
faces_list<-unlist(faces_list, recursive = FALSE)
for (level in 3:1){
bin_list <- vector(mode = "list", length = nrow(nodes))
for (i in 1:length(faces_list))
bin_list[[faces_list[[i]][level]]]<-c(bin_list[[faces_list[[i]][level]]],faces_list[i])
faces_list <- unlist(bin_list, recursive = FALSE)
}
repeated_faces<-rep(FALSE,length(faces_list))
previous<-faces_list[[1]]
for (current in faces_list[-1]){
if(identical(current[1:3],previous[1:3])){
repeated_faces[i]<-TRUE
neighbors[current[4:5]]<-previous[4]
neighbors[previous[4:5]]<-current[4]
}
previous<-current
}
a<-matrix(1:4,nrow=2)
a
a[c(1,2)]
#Compute neighbors (see Ueng, Sikorski 1996)
neighbors <- matrix(-1, nrow = nrow(tetrahedrons), ncol = 4)
#Note: select first 4 cols of tetrahedrons to avoid issues in case order=2
ordered_tetrahedrons<-cbind(t(apply(tetrahedrons[,1:4], 1, sort)),1:nrow(tetrahedrons))
faces_list<-apply(ordered_tetrahedrons, 1, function(x){
F1<-c(x[c(1,2,3)],x[5],1)
F2<-c(x[c(1,2,4)],x[5],2)
F3<-c(x[c(1,3,4)],x[5],3)
F4<-c(x[c(2,3,4)],x[5],4)
list(F1,F2,F3,F4)
})
faces_list<-unlist(faces_list, recursive = FALSE)
for (level in 3:1){
bin_list <- vector(mode = "list", length = nrow(nodes))
for (i in 1:length(faces_list))
bin_list[[faces_list[[i]][level]]]<-c(bin_list[[faces_list[[i]][level]]],faces_list[i])
faces_list <- unlist(bin_list, recursive = FALSE)
}
repeated_faces<-rep(FALSE,length(faces_list))
previous<-faces_list[[1]]
for (current in faces_list[-1]){
if(identical(current[1:3],previous[1:3])){
repeated_faces[i]<-TRUE
neighbors[current[4],current[5]]<-previous[4]
neighbors[previous[4],previous[5]]<-current[4]
}
previous<-current
}
#Questo non funziona per ora
midpoints <- nodes[edges[,1],]/2+nodes[edges[,2],]/2
anyDuplicated(rbind(nodes,midpoints))
library(fdaPDE)
data(sphere3Ddata)
nodes=sphere3Ddata$nodes
tetrahedrons=sphere3Ddata$tetrahedrons
#Compute neighbors (see Ueng, Sikorski 1996)
neighbors <- matrix(-1, nrow = nrow(tetrahedrons), ncol = 4)
#Note: select first 4 cols of tetrahedrons to avoid issues in case order=2
ordered_tetrahedrons<-cbind(t(apply(tetrahedrons[,1:4], 1, sort)),1:nrow(tetrahedrons))
faces_list<-apply(ordered_tetrahedrons, 1, function(x){
F1<-c(x[c(1,2,3)],x[5],1)
F2<-c(x[c(1,2,4)],x[5],2)
F3<-c(x[c(1,3,4)],x[5],3)
F4<-c(x[c(2,3,4)],x[5],4)
list(F1,F2,F3,F4)
})
faces_list<-unlist(faces_list, recursive = FALSE)
for (level in 3:1){
bin_list <- vector(mode = "list", length = nrow(nodes))
for (i in 1:length(faces_list))
bin_list[[faces_list[[i]][level]]]<-c(bin_list[[faces_list[[i]][level]]],faces_list[i])
faces_list <- unlist(bin_list, recursive = FALSE)
}
repeated_faces<-rep(FALSE,length(faces_list))
previous<-faces_list[[1]]
for (current in faces_list[-1]){
if(identical(current[1:3],previous[1:3])){
repeated_faces[i]<-TRUE
neighbors[current[4],current[5]]<-previous[4]
neighbors[previous[4],previous[5]]<-current[4]
}
previous<-current
}
#Remove duplicates and set faces
faces <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,1:3]
faces <- faces[!repeated_faces,]
#Set facesmarkers and nodemarkers
facesmarkers <- !repeated_faces & !c(repeated_faces[-1],repeated_faces[length(repeated_faces)])
nodesmarkers <- 1:nrow(nodes) %in% faces[facesmarkers]
facesmarkers <- as.numeric(facesmarkers)
nodesmarkers <- as.numeric(nodesmarkers)
#Set edges
ordered_triangles<-cbind(t(apply(faces, 1, sort)),1:nrow(faces))
edge_list<-apply(ordered_triangles, 1, function(x){
E1<-c(x[c(1,2)],x[4],1)
E2<-c(x[c(1,3)],x[4],2)
E3<-c(x[c(2,3)],x[4],3)
list(E1,E2,E3)
})
edge_list<-unlist(edge_list, recursive = FALSE)
for (level in 2:1){
bin_list <- vector(mode = "list", length = nrow(nodes))
for (i in 1:length(edge_list))
bin_list[[edge_list[[i]][level]]]<-c(bin_list[[edge_list[[i]][level]]],edge_list[i])
edge_list <- unlist(bin_list, recursive = FALSE)
}
repeated_edges<-mapply(function(X,Y){
identical(X[1:2],Y[1:2])
},edge_list[-length(edge_list)],edge_list[-1])
repeated_edges<-c(FALSE,repeated_edges)
#Remove duplicates and set edges
edges <- matrix(unlist(edge_list),ncol=4, byrow = TRUE)[,1:2]
edges <- edges[!repeated_edges,]
#Set edgesmarkers
edgesmarkers <- !repeated_edges & !c(repeated_edges[-1],repeated_edges[length(repeated_edges)])
edgesmarkers <- as.numeric(edgesmarkers)
#Questo non funziona per ora
midpoints <- nodes[edges[,1],]/2+nodes[edges[,2],]/2
face_labels <- matrix(unlist(edge_list),ncol=4, byrow = TRUE)[,3:4]
indices<-nrow(nodes)+cumsum(!repeated_edges)
faces_temp<-cbind(faces,matrix(0,nrow=nrow(faces),ncol=3))
faces_temp[face_labels]<-indices
face_labels <- matrix(unlist(edge_list),ncol=4, byrow = TRUE)[,3:4]
face_labels <- matrix(unlist(edge_list),ncol=4, byrow = TRUE)[,3:4]
face_labels[,2]<-face_labels[,2]+3
indices<-nrow(nodes)+cumsum(!repeated_edges)
faces_temp<-cbind(faces,matrix(0,nrow=nrow(faces),ncol=3))
faces_temp[face_labels]<-indices
View(faces_temp)
rep(1:3,each=c(1,2,4))
?apply
lapply(1:3,sqrt)
vapply(1:3,sqrt,numeric(0))
vapply(1:3,sqrt,numeric(1))
tetrahedron_labels <- matrix(unlist(faces_list),ncol=4, byrow = TRUE)[,4:5]
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
View(tetrahedron_labels)
last<-tail(face_temp,1)
last<-tail(faces_temp,1)
newnodes<-rbind(nodes,midpoints)
rgl.points(newnodes[last,1],newnodes[last,2],newnodes[last,3])
last<-head(faces_temp,1)
rgl.points(newnodes[last,1],newnodes[last,2],newnodes[last,3])
face_labels <- matrix(unlist(edge_list),ncol=4, byrow = TRUE)[,3:4]
indices<-nrow(nodes)+cumsum(!repeated_edges)
faces_temp<-matrix(0,nrow=nrow(faces),ncol=3)
faces_temp[face_labels]<-indices
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
which(repeated_faces)
repeated_faces<-rep(FALSE,length(faces_list))
which(repeated_faces)
previous<-faces_list[[1]]
for (current in faces_list[-1]){
if(identical(current[1:3],previous[1:3])){
repeated_faces[i]<-TRUE
neighbors[current[4],current[5]]<-previous[4]
neighbors[previous[4],previous[5]]<-current[4]
}
previous<-current
}
which(repeated_faces)
data(sphere3Ddata)
nodes=sphere3Ddata$nodes
tetrahedrons=sphere3Ddata$tetrahedrons
#Compute neighbors (see Ueng, Sikorski 1996)
neighbors <- matrix(-1, nrow = nrow(tetrahedrons), ncol = 4)
#Note: select first 4 cols of tetrahedrons to avoid issues in case order=2
ordered_tetrahedrons<-cbind(t(apply(tetrahedrons[,1:4], 1, sort)),1:nrow(tetrahedrons))
faces_list<-apply(ordered_tetrahedrons, 1, function(x){
F1<-c(x[c(1,2,3)],x[5],1)
F2<-c(x[c(1,2,4)],x[5],2)
F3<-c(x[c(1,3,4)],x[5],3)
F4<-c(x[c(2,3,4)],x[5],4)
list(F1,F2,F3,F4)
})
faces_list<-unlist(faces_list, recursive = FALSE)
for (level in 3:1){
bin_list <- vector(mode = "list", length = nrow(nodes))
for (i in 1:length(faces_list))
bin_list[[faces_list[[i]][level]]]<-c(bin_list[[faces_list[[i]][level]]],faces_list[i])
faces_list <- unlist(bin_list, recursive = FALSE)
}
repeated_faces<-rep(FALSE,length(faces_list))
previous<-faces_list[[1]]
for (current in faces_list[-1]){
if(identical(current[1:3],previous[1:3])){
repeated_faces[i]<-TRUE
neighbors[current[4],current[5]]<-previous[4]
neighbors[previous[4],previous[5]]<-current[4]
}
previous<-current
}
which(repeated_faces)
repeated_faces<-mapply(function(X,Y){
identical(X[1:3],Y[1:3])
},edge_list[-length(face_list)],face_list[-1])
repeated_faces<-c(FALSE,repeated_faces)
repeated_faces<-mapply(function(X,Y){
identical(X[1:3],Y[1:3])
},faces_list[-length(faces_list)],faces_list[-1])
repeated_faces<-c(FALSE,repeated_faces)
repeated_faces<-mapply(function(X,Y){
identical(X[1:3],Y[1:3])
},faces_list[-length(faces_list)],faces_list[-1])
repeated_faces<-c(FALSE,repeated_faces)
#Remove duplicates and set faces
faces <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,1:3]
faces <- faces[!repeated_faces,]
#Set facesmarkers and nodemarkers
facesmarkers <- !repeated_faces & !c(repeated_faces[-1],repeated_faces[length(repeated_faces)])
nodesmarkers <- 1:nrow(nodes) %in% faces[facesmarkers]
facesmarkers <- as.numeric(facesmarkers)
nodesmarkers <- as.numeric(nodesmarkers)
#Set edges
ordered_triangles<-cbind(t(apply(faces, 1, sort)),1:nrow(faces))
edge_list<-apply(ordered_triangles, 1, function(x){
E1<-c(x[c(1,2)],x[4],1)
E2<-c(x[c(1,3)],x[4],2)
E3<-c(x[c(2,3)],x[4],3)
list(E1,E2,E3)
})
edge_list<-unlist(edge_list, recursive = FALSE)
for (level in 2:1){
bin_list <- vector(mode = "list", length = nrow(nodes))
for (i in 1:length(edge_list))
bin_list[[edge_list[[i]][level]]]<-c(bin_list[[edge_list[[i]][level]]],edge_list[i])
edge_list <- unlist(bin_list, recursive = FALSE)
}
repeated_edges<-mapply(function(X,Y){
identical(X[1:2],Y[1:2])
},edge_list[-length(edge_list)],edge_list[-1])
repeated_edges<-c(FALSE,repeated_edges)
#Remove duplicates and set edges
edges <- matrix(unlist(edge_list),ncol=4, byrow = TRUE)[,1:2]
edges <- edges[!repeated_edges,]
#Set edgesmarkers
edgesmarkers <- !repeated_edges & !c(repeated_edges[-1],repeated_edges[length(repeated_edges)])
edgesmarkers <- as.numeric(edgesmarkers)
#Questo non funziona per ora
midpoints <- nodes[edges[,1],]/2+nodes[edges[,2],]/2
lookUp <- cbind(rep(1:4,each=3),rep(1:3,4),c(1,2,3,1,4,5,2,4,6,3,5,6))
face_labels <- matrix(unlist(edge_list),ncol=4, byrow = TRUE)[,3:4]
indices<-nrow(nodes)+cumsum(!repeated_edges)
faces_temp<-matrix(0,nrow=nrow(faces),ncol=3)
faces_temp[face_labels]<-indices
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
head(face_labels)
head(face_labels,40)
tetrahedron_labels <- cbind(tetrahedron_labels[faces_labels[,1],],faces_labels[,2])
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
tetrahedron_labels <- cbind(tetrahedron_labels[face_labels[,1],],face_labels[,2])
?merge
lookUp
tetrahedron_labels <- merge(tetrahedron_labels,lookUp,by.x=2:3,by.y=1:2)
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
tetrahedron_labels <- cbind(tetrahedron_labels[face_labels[,1],],face_labels[,2])
tetrahedron_labels <- merge(tetrahedron_labels,lookUp,by.x=2:3,by.y=1:2)[,3:4]
a
a<-matrix(1:6,ncol=2)
a
as.vector(a)
apply(a,2,rep)
apply(a,2,function(x){rep(x,2)})
apply(a,1,function(x){rep(x,2)})
head(repeated_faces)
a[c(1,2,2),]
a
head(!cumsum(repeated_faces)
)
head(cumsum(!repeated_faces)
)
lookUp <- cbind(rep(1:4,each=3),rep(1:3,4),4+c(1,2,3,1,4,5,2,4,6,3,5,6))
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
tetrahedron_labels <- cbind(tetrahedron_labels[face_labels[,1],],face_labels[,2])
tetrahedron_labels <- merge(tetrahedron_labels,lookUp,by.x=2:3,by.y=1:2)[,3:4]
indices <- as.vector(faces_temp[cumsum(!repeated_faces),])
#Questo non funziona per ora
midpoints <- nodes[edges[,1],]/2+nodes[edges[,2],]/2
lookUp <- cbind(rep(1:4,each=3),rep(1:3,4),4+c(1,2,3,1,4,5,2,4,6,3,5,6))
face_labels <- matrix(unlist(edge_list),ncol=4, byrow = TRUE)[,3:4]
indices<-nrow(nodes)+cumsum(!repeated_edges)
faces_temp<-matrix(0,nrow=nrow(faces),ncol=3)
faces_temp[face_labels]<-indices
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
tetrahedron_labels <- cbind(tetrahedron_labels[face_labels[,1],],face_labels[,2])
tetrahedron_labels <- merge(tetrahedron_labels,lookUp,by.x=2:3,by.y=1:2)[,3:4]
tetrahedrons_temp <- cbind(tetrahedrons, matrix(0,nrow=nrow(tetrahedrons),ncol=6))
indices <- as.vector(faces_temp[cumsum(!repeated_faces),])
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[!repeated_faces,4:5]
head(face_labels)
tetrahedron_labels <- cbind(tetrahedron_labels,face_labels[,2])
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[!repeated_faces,4:5]
tetrahedron_labels <- cbind(tetrahedron_labels,face_labels[,2])
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[!repeated_faces,4:5]
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
indices <- as.vector(faces_temp[cumsum(!repeated_faces),])
indices<-nrow(nodes)+cumsum(!repeated_edges)
faces_temp<-matrix(0,nrow=nrow(faces),ncol=3)
faces_temp[face_labels]<-indices
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
indices <- faces_temp[cumsum(!repeated_faces),]
View(indices)
lookUp
lookUp <- cbind(rep(1:4,each=3),4+c(1,2,3,1,4,5,2,4,6,3,5,6))
lookUp
View(tetrahedron_labels)
tetrahedron_labels2 <- merge(tetrahedron_labels,lookUp,by.x=2,by.y=1)
View(tetrahedron_labels2)
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
tetrahedron_labels <- merge(tetrahedron_labels,lookUp,by.x=2,by.y=1)[,2:3]
indices <- as.vector(faces_temp[cumsum(!repeated_faces),])
tetrahedrons_temp <- cbind(tetrahedrons, matrix(0,nrow=nrow(tetrahedrons),ncol=6))
tetrahedrons_temp[tetrahedron_labels]<-indices
tetrahedron_labels <- as.matrix(merge(tetrahedron_labels,lookUp,by.x=2,by.y=1)[,2:3])
tetrahedrons_temp[tetrahedron_labels]<-indices
last<-tail(tetrahedrons_temp,1)
nodes<-rbind(nodes,midpoints)
rgl.points(nodes[last,1],nodes[last,2],nodes[last,3])
last
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
tetrahedron_labels <- as.matrix(merge(tetrahedron_labels,lookUp,by.x=2,by.y=1)[,2:3])
indices <- as.vector(faces_temp[cumsum(!repeated_faces),])
tetrahedrons_temp <- cbind(tetrahedrons, matrix(0,nrow=nrow(tetrahedrons),ncol=6))
tetrahedrons_temp[tetrahedron_labels]<-indices
last<-tail(tetrahedrons_temp,1)
rgl.points(nodes[last,1],nodes[last,2],nodes[last,3])
last
nrow(nodes)
nrow(midpoints)
lookUp
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
tetrahedron_labels <- as.matrix(merge(tetrahedron_labels,lookUp,by.x=2,by.y=1))
View(faces_temp)
head(face_labels)
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
range(face_labels[1,])
range(face_labels[,1])
max(face_labels)
last<-head(tetrahedrons_temp,1)
rgl.points(nodes[last,1],nodes[last,2],nodes[last,3])
rgl.points(nodes[last,1],nodes[last,2],nodes[last,3])
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
indices <- faces_temp[cumsum(!repeated_faces),]
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
indices <- faces_temp[cumsum(!repeated_faces),]
View(indices)
??setunion
union(1:3,2:5)
union(NULL,1:4)
View(faces_temp)
tetrahedron_labels <- matrix(unlist(faces_list),ncol=5, byrow = TRUE)[,4:5]
indices <- faces_temp[cumsum(!repeated_faces),]
tetrahedrons_temp <- cbind(tetrahedrons, matrix(0,nrow=nrow(tetrahedrons),ncol=6))
bin_list <- vector(mode = "list", length = nrow(tetrahedrons))
for (i in 1:nrow(tetrahedron_labels)){
bin_list[[tetrahedron_labels[i,1]]]<-union(bin_list[[tetrahedron_labels[i,1]]],indices[i,])
}
unlist(bin_list[2])
unlist(bin_list[1:3])
tetrahedrons_temp[,5:10] <- matrix(unlist(bin_list),nrow=nrow(tetrahedrons),ncol=6,byrow = TRUE)
last<-head(tetrahedrons_temp,1)
rgl.points(nodes[last,1],nodes[last,2],nodes[last,3])
last<-tail(tetrahedrons_temp,1)
rgl.points(nodes[last,1],nodes[last,2],nodes[last,3])
